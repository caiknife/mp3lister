// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package music

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/caiknife/mp3lister/orm/music/model"
)

func newSong(db *gorm.DB, opts ...gen.DOOption) song {
	_song := song{}

	_song.songDo.UseDB(db, opts...)
	_song.songDo.UseModel(&model.Song{})

	tableName := _song.songDo.TableName()
	_song.ALL = field.NewAsterisk(tableName)
	_song.ID = field.NewUint64(tableName, "id")
	_song.CreatedAt = field.NewTime(tableName, "created_at")
	_song.UpdatedAt = field.NewTime(tableName, "updated_at")
	_song.DeletedAt = field.NewField(tableName, "deleted_at")
	_song.Title = field.NewString(tableName, "title")
	_song.Artist = field.NewString(tableName, "artist")
	_song.Album = field.NewString(tableName, "album")
	_song.Bpm = field.NewInt32(tableName, "bpm")
	_song.OriginFile = field.NewString(tableName, "origin_file")
	_song.Length = field.NewFloat64(tableName, "length")
	_song.Version = field.NewUint64(tableName, "version")

	_song.fillFieldMap()

	return _song
}

type song struct {
	songDo

	ALL        field.Asterisk
	ID         field.Uint64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	Title      field.String  // 歌曲名称
	Artist     field.String  // 艺术家
	Album      field.String  // 专辑
	Bpm        field.Int32   // BPM
	OriginFile field.String  // 源文件路径
	Length     field.Float64 // 歌曲长度
	Version    field.Uint64  // 乐观锁版本号

	fieldMap map[string]field.Expr
}

func (s song) Table(newTableName string) *song {
	s.songDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s song) As(alias string) *song {
	s.songDo.DO = *(s.songDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *song) updateTableName(table string) *song {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Title = field.NewString(table, "title")
	s.Artist = field.NewString(table, "artist")
	s.Album = field.NewString(table, "album")
	s.Bpm = field.NewInt32(table, "bpm")
	s.OriginFile = field.NewString(table, "origin_file")
	s.Length = field.NewFloat64(table, "length")
	s.Version = field.NewUint64(table, "version")

	s.fillFieldMap()

	return s
}

func (s *song) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *song) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["title"] = s.Title
	s.fieldMap["artist"] = s.Artist
	s.fieldMap["album"] = s.Album
	s.fieldMap["bpm"] = s.Bpm
	s.fieldMap["origin_file"] = s.OriginFile
	s.fieldMap["length"] = s.Length
	s.fieldMap["version"] = s.Version
}

func (s song) clone(db *gorm.DB) song {
	s.songDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s song) replaceDB(db *gorm.DB) song {
	s.songDo.ReplaceDB(db)
	return s
}

type songDo struct{ gen.DO }

func (s songDo) Debug() *songDo {
	return s.withDO(s.DO.Debug())
}

func (s songDo) WithContext(ctx context.Context) *songDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s songDo) ReadDB() *songDo {
	return s.Clauses(dbresolver.Read)
}

func (s songDo) WriteDB() *songDo {
	return s.Clauses(dbresolver.Write)
}

func (s songDo) Session(config *gorm.Session) *songDo {
	return s.withDO(s.DO.Session(config))
}

func (s songDo) Clauses(conds ...clause.Expression) *songDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s songDo) Returning(value interface{}, columns ...string) *songDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s songDo) Not(conds ...gen.Condition) *songDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s songDo) Or(conds ...gen.Condition) *songDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s songDo) Select(conds ...field.Expr) *songDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s songDo) Where(conds ...gen.Condition) *songDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s songDo) Order(conds ...field.Expr) *songDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s songDo) Distinct(cols ...field.Expr) *songDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s songDo) Omit(cols ...field.Expr) *songDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s songDo) Join(table schema.Tabler, on ...field.Expr) *songDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s songDo) LeftJoin(table schema.Tabler, on ...field.Expr) *songDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s songDo) RightJoin(table schema.Tabler, on ...field.Expr) *songDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s songDo) Group(cols ...field.Expr) *songDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s songDo) Having(conds ...gen.Condition) *songDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s songDo) Limit(limit int) *songDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s songDo) Offset(offset int) *songDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s songDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *songDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s songDo) Unscoped() *songDo {
	return s.withDO(s.DO.Unscoped())
}

func (s songDo) Create(values ...*model.Song) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s songDo) CreateInBatches(values []*model.Song, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s songDo) Save(values ...*model.Song) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s songDo) First() (*model.Song, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Song), nil
	}
}

func (s songDo) Take() (*model.Song, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Song), nil
	}
}

func (s songDo) Last() (*model.Song, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Song), nil
	}
}

func (s songDo) Find() ([]*model.Song, error) {
	result, err := s.DO.Find()
	return result.([]*model.Song), err
}

func (s songDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Song, err error) {
	buf := make([]*model.Song, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s songDo) FindInBatches(result *[]*model.Song, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s songDo) Attrs(attrs ...field.AssignExpr) *songDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s songDo) Assign(attrs ...field.AssignExpr) *songDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s songDo) Joins(fields ...field.RelationField) *songDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s songDo) Preload(fields ...field.RelationField) *songDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s songDo) FirstOrInit() (*model.Song, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Song), nil
	}
}

func (s songDo) FirstOrCreate() (*model.Song, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Song), nil
	}
}

func (s songDo) FindByPage(offset int, limit int) (result []*model.Song, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s songDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s songDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s songDo) Delete(models ...*model.Song) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *songDo) withDO(do gen.Dao) *songDo {
	s.DO = *do.(*gen.DO)
	return s
}
