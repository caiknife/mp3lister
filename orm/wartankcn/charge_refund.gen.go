// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package wartankcn

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/caiknife/mp3lister/orm/wartankcn/model"
)

func newChargeRefund(db *gorm.DB, opts ...gen.DOOption) chargeRefund {
	_chargeRefund := chargeRefund{}

	_chargeRefund.chargeRefundDo.UseDB(db, opts...)
	_chargeRefund.chargeRefundDo.UseModel(&model.ChargeRefund{})

	tableName := _chargeRefund.chargeRefundDo.TableName()
	_chargeRefund.ALL = field.NewAsterisk(tableName)
	_chargeRefund.ID = field.NewUint64(tableName, "id")
	_chargeRefund.GameCenterID = field.NewString(tableName, "game_center_id")
	_chargeRefund.PlayerID = field.NewInt64(tableName, "player_id")
	_chargeRefund.TotalCharge = field.NewFloat64(tableName, "total_charge")
	_chargeRefund.Diamonds = field.NewInt64(tableName, "diamonds")
	_chargeRefund.Acquired = field.NewBool(tableName, "acquired")
	_chargeRefund.CreatedAt = field.NewTime(tableName, "created_at")
	_chargeRefund.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chargeRefund.DeletedAt = field.NewField(tableName, "deleted_at")

	_chargeRefund.fillFieldMap()

	return _chargeRefund
}

type chargeRefund struct {
	chargeRefundDo

	ALL          field.Asterisk
	ID           field.Uint64
	GameCenterID field.String
	PlayerID     field.Int64
	TotalCharge  field.Float64
	Diamonds     field.Int64
	Acquired     field.Bool
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (c chargeRefund) Table(newTableName string) *chargeRefund {
	c.chargeRefundDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chargeRefund) As(alias string) *chargeRefund {
	c.chargeRefundDo.DO = *(c.chargeRefundDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chargeRefund) updateTableName(table string) *chargeRefund {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint64(table, "id")
	c.GameCenterID = field.NewString(table, "game_center_id")
	c.PlayerID = field.NewInt64(table, "player_id")
	c.TotalCharge = field.NewFloat64(table, "total_charge")
	c.Diamonds = field.NewInt64(table, "diamonds")
	c.Acquired = field.NewBool(table, "acquired")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *chargeRefund) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chargeRefund) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["game_center_id"] = c.GameCenterID
	c.fieldMap["player_id"] = c.PlayerID
	c.fieldMap["total_charge"] = c.TotalCharge
	c.fieldMap["diamonds"] = c.Diamonds
	c.fieldMap["acquired"] = c.Acquired
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c chargeRefund) clone(db *gorm.DB) chargeRefund {
	c.chargeRefundDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chargeRefund) replaceDB(db *gorm.DB) chargeRefund {
	c.chargeRefundDo.ReplaceDB(db)
	return c
}

type chargeRefundDo struct{ gen.DO }

func (c chargeRefundDo) Debug() *chargeRefundDo {
	return c.withDO(c.DO.Debug())
}

func (c chargeRefundDo) WithContext(ctx context.Context) *chargeRefundDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chargeRefundDo) ReadDB() *chargeRefundDo {
	return c.Clauses(dbresolver.Read)
}

func (c chargeRefundDo) WriteDB() *chargeRefundDo {
	return c.Clauses(dbresolver.Write)
}

func (c chargeRefundDo) Session(config *gorm.Session) *chargeRefundDo {
	return c.withDO(c.DO.Session(config))
}

func (c chargeRefundDo) Clauses(conds ...clause.Expression) *chargeRefundDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chargeRefundDo) Returning(value interface{}, columns ...string) *chargeRefundDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chargeRefundDo) Not(conds ...gen.Condition) *chargeRefundDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chargeRefundDo) Or(conds ...gen.Condition) *chargeRefundDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chargeRefundDo) Select(conds ...field.Expr) *chargeRefundDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chargeRefundDo) Where(conds ...gen.Condition) *chargeRefundDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chargeRefundDo) Order(conds ...field.Expr) *chargeRefundDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chargeRefundDo) Distinct(cols ...field.Expr) *chargeRefundDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chargeRefundDo) Omit(cols ...field.Expr) *chargeRefundDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chargeRefundDo) Join(table schema.Tabler, on ...field.Expr) *chargeRefundDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chargeRefundDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chargeRefundDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chargeRefundDo) RightJoin(table schema.Tabler, on ...field.Expr) *chargeRefundDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chargeRefundDo) Group(cols ...field.Expr) *chargeRefundDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chargeRefundDo) Having(conds ...gen.Condition) *chargeRefundDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chargeRefundDo) Limit(limit int) *chargeRefundDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chargeRefundDo) Offset(offset int) *chargeRefundDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chargeRefundDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chargeRefundDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chargeRefundDo) Unscoped() *chargeRefundDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chargeRefundDo) Create(values ...*model.ChargeRefund) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chargeRefundDo) CreateInBatches(values []*model.ChargeRefund, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chargeRefundDo) Save(values ...*model.ChargeRefund) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chargeRefundDo) First() (*model.ChargeRefund, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChargeRefund), nil
	}
}

func (c chargeRefundDo) Take() (*model.ChargeRefund, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChargeRefund), nil
	}
}

func (c chargeRefundDo) Last() (*model.ChargeRefund, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChargeRefund), nil
	}
}

func (c chargeRefundDo) Find() ([]*model.ChargeRefund, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChargeRefund), err
}

func (c chargeRefundDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChargeRefund, err error) {
	buf := make([]*model.ChargeRefund, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chargeRefundDo) FindInBatches(result *[]*model.ChargeRefund, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chargeRefundDo) Attrs(attrs ...field.AssignExpr) *chargeRefundDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chargeRefundDo) Assign(attrs ...field.AssignExpr) *chargeRefundDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chargeRefundDo) Joins(fields ...field.RelationField) *chargeRefundDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chargeRefundDo) Preload(fields ...field.RelationField) *chargeRefundDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chargeRefundDo) FirstOrInit() (*model.ChargeRefund, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChargeRefund), nil
	}
}

func (c chargeRefundDo) FirstOrCreate() (*model.ChargeRefund, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChargeRefund), nil
	}
}

func (c chargeRefundDo) FindByPage(offset int, limit int) (result []*model.ChargeRefund, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chargeRefundDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chargeRefundDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chargeRefundDo) Delete(models ...*model.ChargeRefund) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chargeRefundDo) withDO(do gen.Dao) *chargeRefundDo {
	c.DO = *do.(*gen.DO)
	return c
}
