// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package wartankcn

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/caiknife/mp3lister/orm/wartankcn/model"
)

func newWtOrder(db *gorm.DB, opts ...gen.DOOption) wtOrder {
	_wtOrder := wtOrder{}

	_wtOrder.wtOrderDo.UseDB(db, opts...)
	_wtOrder.wtOrderDo.UseModel(&model.WtOrder{})

	tableName := _wtOrder.wtOrderDo.TableName()
	_wtOrder.ALL = field.NewAsterisk(tableName)
	_wtOrder.ID = field.NewString(tableName, "id")
	_wtOrder.PlayerID = field.NewInt64(tableName, "player_id")
	_wtOrder.BundleID = field.NewString(tableName, "bundle_id")
	_wtOrder.OrderStatus = field.NewInt32(tableName, "order_status")
	_wtOrder.ProductID = field.NewString(tableName, "product_id")
	_wtOrder.PayType = field.NewInt32(tableName, "pay_type")
	_wtOrder.CreateTime = field.NewTime(tableName, "create_time")
	_wtOrder.UpdateTime = field.NewTime(tableName, "update_time")
	_wtOrder.TransID = field.NewString(tableName, "trans_id")
	_wtOrder.OrderInfo = field.NewString(tableName, "order_info")
	_wtOrder.RewardInfo = field.NewString(tableName, "reward_info")
	_wtOrder.Version = field.NewInt64(tableName, "version")

	_wtOrder.fillFieldMap()

	return _wtOrder
}

// wtOrder 订单表
type wtOrder struct {
	wtOrderDo

	ALL         field.Asterisk
	ID          field.String // 订单ID
	PlayerID    field.Int64  // 玩家ID
	BundleID    field.String // BUNDLE ID
	OrderStatus field.Int32  // 订单类型
	ProductID   field.String // 产品ID
	PayType     field.Int32  // 支付类型
	CreateTime  field.Time   // 创建时间
	UpdateTime  field.Time   // 更新时间
	TransID     field.String // 交易ID
	OrderInfo   field.String // 订单信息
	RewardInfo  field.String // 奖励信息
	Version     field.Int64  // 数据版本

	fieldMap map[string]field.Expr
}

func (w wtOrder) Table(newTableName string) *wtOrder {
	w.wtOrderDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wtOrder) As(alias string) *wtOrder {
	w.wtOrderDo.DO = *(w.wtOrderDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wtOrder) updateTableName(table string) *wtOrder {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewString(table, "id")
	w.PlayerID = field.NewInt64(table, "player_id")
	w.BundleID = field.NewString(table, "bundle_id")
	w.OrderStatus = field.NewInt32(table, "order_status")
	w.ProductID = field.NewString(table, "product_id")
	w.PayType = field.NewInt32(table, "pay_type")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")
	w.TransID = field.NewString(table, "trans_id")
	w.OrderInfo = field.NewString(table, "order_info")
	w.RewardInfo = field.NewString(table, "reward_info")
	w.Version = field.NewInt64(table, "version")

	w.fillFieldMap()

	return w
}

func (w *wtOrder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wtOrder) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 12)
	w.fieldMap["id"] = w.ID
	w.fieldMap["player_id"] = w.PlayerID
	w.fieldMap["bundle_id"] = w.BundleID
	w.fieldMap["order_status"] = w.OrderStatus
	w.fieldMap["product_id"] = w.ProductID
	w.fieldMap["pay_type"] = w.PayType
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
	w.fieldMap["trans_id"] = w.TransID
	w.fieldMap["order_info"] = w.OrderInfo
	w.fieldMap["reward_info"] = w.RewardInfo
	w.fieldMap["version"] = w.Version
}

func (w wtOrder) clone(db *gorm.DB) wtOrder {
	w.wtOrderDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wtOrder) replaceDB(db *gorm.DB) wtOrder {
	w.wtOrderDo.ReplaceDB(db)
	return w
}

type wtOrderDo struct{ gen.DO }

func (w wtOrderDo) Debug() *wtOrderDo {
	return w.withDO(w.DO.Debug())
}

func (w wtOrderDo) WithContext(ctx context.Context) *wtOrderDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wtOrderDo) ReadDB() *wtOrderDo {
	return w.Clauses(dbresolver.Read)
}

func (w wtOrderDo) WriteDB() *wtOrderDo {
	return w.Clauses(dbresolver.Write)
}

func (w wtOrderDo) Session(config *gorm.Session) *wtOrderDo {
	return w.withDO(w.DO.Session(config))
}

func (w wtOrderDo) Clauses(conds ...clause.Expression) *wtOrderDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wtOrderDo) Returning(value interface{}, columns ...string) *wtOrderDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wtOrderDo) Not(conds ...gen.Condition) *wtOrderDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wtOrderDo) Or(conds ...gen.Condition) *wtOrderDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wtOrderDo) Select(conds ...field.Expr) *wtOrderDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wtOrderDo) Where(conds ...gen.Condition) *wtOrderDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wtOrderDo) Order(conds ...field.Expr) *wtOrderDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wtOrderDo) Distinct(cols ...field.Expr) *wtOrderDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wtOrderDo) Omit(cols ...field.Expr) *wtOrderDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wtOrderDo) Join(table schema.Tabler, on ...field.Expr) *wtOrderDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wtOrderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wtOrderDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wtOrderDo) RightJoin(table schema.Tabler, on ...field.Expr) *wtOrderDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wtOrderDo) Group(cols ...field.Expr) *wtOrderDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wtOrderDo) Having(conds ...gen.Condition) *wtOrderDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wtOrderDo) Limit(limit int) *wtOrderDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wtOrderDo) Offset(offset int) *wtOrderDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wtOrderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wtOrderDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wtOrderDo) Unscoped() *wtOrderDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wtOrderDo) Create(values ...*model.WtOrder) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wtOrderDo) CreateInBatches(values []*model.WtOrder, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wtOrderDo) Save(values ...*model.WtOrder) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wtOrderDo) First() (*model.WtOrder, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtOrder), nil
	}
}

func (w wtOrderDo) Take() (*model.WtOrder, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtOrder), nil
	}
}

func (w wtOrderDo) Last() (*model.WtOrder, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtOrder), nil
	}
}

func (w wtOrderDo) Find() ([]*model.WtOrder, error) {
	result, err := w.DO.Find()
	return result.([]*model.WtOrder), err
}

func (w wtOrderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WtOrder, err error) {
	buf := make([]*model.WtOrder, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wtOrderDo) FindInBatches(result *[]*model.WtOrder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wtOrderDo) Attrs(attrs ...field.AssignExpr) *wtOrderDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wtOrderDo) Assign(attrs ...field.AssignExpr) *wtOrderDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wtOrderDo) Joins(fields ...field.RelationField) *wtOrderDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wtOrderDo) Preload(fields ...field.RelationField) *wtOrderDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wtOrderDo) FirstOrInit() (*model.WtOrder, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtOrder), nil
	}
}

func (w wtOrderDo) FirstOrCreate() (*model.WtOrder, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtOrder), nil
	}
}

func (w wtOrderDo) FindByPage(offset int, limit int) (result []*model.WtOrder, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wtOrderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wtOrderDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wtOrderDo) Delete(models ...*model.WtOrder) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wtOrderDo) withDO(do gen.Dao) *wtOrderDo {
	w.DO = *do.(*gen.DO)
	return w
}
