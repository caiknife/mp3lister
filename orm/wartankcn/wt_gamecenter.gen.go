// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package wartankcn

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/caiknife/mp3lister/orm/wartankcn/model"
)

func newWtGamecenter(db *gorm.DB, opts ...gen.DOOption) wtGamecenter {
	_wtGamecenter := wtGamecenter{}

	_wtGamecenter.wtGamecenterDo.UseDB(db, opts...)
	_wtGamecenter.wtGamecenterDo.UseModel(&model.WtGamecenter{})

	tableName := _wtGamecenter.wtGamecenterDo.TableName()
	_wtGamecenter.ALL = field.NewAsterisk(tableName)
	_wtGamecenter.ID = field.NewString(tableName, "id")
	_wtGamecenter.BundleID = field.NewString(tableName, "bundle_id")
	_wtGamecenter.PlayerID = field.NewInt64(tableName, "player_id")
	_wtGamecenter.GcDisplayName = field.NewString(tableName, "gc_display_name")
	_wtGamecenter.GcGamePlayerID = field.NewString(tableName, "gc_game_player_id")
	_wtGamecenter.GcTeamPlayerID = field.NewString(tableName, "gc_team_player_id")
	_wtGamecenter.GcPlayerID = field.NewString(tableName, "gc_player_id")
	_wtGamecenter.CreateTime = field.NewTime(tableName, "create_time")
	_wtGamecenter.UpdateTime = field.NewTime(tableName, "update_time")

	_wtGamecenter.fillFieldMap()

	return _wtGamecenter
}

// wtGamecenter 玩家和GameCenter关系表
type wtGamecenter struct {
	wtGamecenterDo

	ALL            field.Asterisk
	ID             field.String
	BundleID       field.String // BUNDLE ID
	PlayerID       field.Int64  // 玩家ID
	GcDisplayName  field.String // GC displayName
	GcGamePlayerID field.String
	GcTeamPlayerID field.String
	GcPlayerID     field.String
	CreateTime     field.Time // 创建时间
	UpdateTime     field.Time // 更新时间

	fieldMap map[string]field.Expr
}

func (w wtGamecenter) Table(newTableName string) *wtGamecenter {
	w.wtGamecenterDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wtGamecenter) As(alias string) *wtGamecenter {
	w.wtGamecenterDo.DO = *(w.wtGamecenterDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wtGamecenter) updateTableName(table string) *wtGamecenter {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewString(table, "id")
	w.BundleID = field.NewString(table, "bundle_id")
	w.PlayerID = field.NewInt64(table, "player_id")
	w.GcDisplayName = field.NewString(table, "gc_display_name")
	w.GcGamePlayerID = field.NewString(table, "gc_game_player_id")
	w.GcTeamPlayerID = field.NewString(table, "gc_team_player_id")
	w.GcPlayerID = field.NewString(table, "gc_player_id")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")

	w.fillFieldMap()

	return w
}

func (w *wtGamecenter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wtGamecenter) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["id"] = w.ID
	w.fieldMap["bundle_id"] = w.BundleID
	w.fieldMap["player_id"] = w.PlayerID
	w.fieldMap["gc_display_name"] = w.GcDisplayName
	w.fieldMap["gc_game_player_id"] = w.GcGamePlayerID
	w.fieldMap["gc_team_player_id"] = w.GcTeamPlayerID
	w.fieldMap["gc_player_id"] = w.GcPlayerID
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
}

func (w wtGamecenter) clone(db *gorm.DB) wtGamecenter {
	w.wtGamecenterDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wtGamecenter) replaceDB(db *gorm.DB) wtGamecenter {
	w.wtGamecenterDo.ReplaceDB(db)
	return w
}

type wtGamecenterDo struct{ gen.DO }

func (w wtGamecenterDo) Debug() *wtGamecenterDo {
	return w.withDO(w.DO.Debug())
}

func (w wtGamecenterDo) WithContext(ctx context.Context) *wtGamecenterDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wtGamecenterDo) ReadDB() *wtGamecenterDo {
	return w.Clauses(dbresolver.Read)
}

func (w wtGamecenterDo) WriteDB() *wtGamecenterDo {
	return w.Clauses(dbresolver.Write)
}

func (w wtGamecenterDo) Session(config *gorm.Session) *wtGamecenterDo {
	return w.withDO(w.DO.Session(config))
}

func (w wtGamecenterDo) Clauses(conds ...clause.Expression) *wtGamecenterDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wtGamecenterDo) Returning(value interface{}, columns ...string) *wtGamecenterDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wtGamecenterDo) Not(conds ...gen.Condition) *wtGamecenterDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wtGamecenterDo) Or(conds ...gen.Condition) *wtGamecenterDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wtGamecenterDo) Select(conds ...field.Expr) *wtGamecenterDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wtGamecenterDo) Where(conds ...gen.Condition) *wtGamecenterDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wtGamecenterDo) Order(conds ...field.Expr) *wtGamecenterDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wtGamecenterDo) Distinct(cols ...field.Expr) *wtGamecenterDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wtGamecenterDo) Omit(cols ...field.Expr) *wtGamecenterDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wtGamecenterDo) Join(table schema.Tabler, on ...field.Expr) *wtGamecenterDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wtGamecenterDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wtGamecenterDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wtGamecenterDo) RightJoin(table schema.Tabler, on ...field.Expr) *wtGamecenterDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wtGamecenterDo) Group(cols ...field.Expr) *wtGamecenterDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wtGamecenterDo) Having(conds ...gen.Condition) *wtGamecenterDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wtGamecenterDo) Limit(limit int) *wtGamecenterDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wtGamecenterDo) Offset(offset int) *wtGamecenterDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wtGamecenterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wtGamecenterDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wtGamecenterDo) Unscoped() *wtGamecenterDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wtGamecenterDo) Create(values ...*model.WtGamecenter) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wtGamecenterDo) CreateInBatches(values []*model.WtGamecenter, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wtGamecenterDo) Save(values ...*model.WtGamecenter) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wtGamecenterDo) First() (*model.WtGamecenter, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtGamecenter), nil
	}
}

func (w wtGamecenterDo) Take() (*model.WtGamecenter, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtGamecenter), nil
	}
}

func (w wtGamecenterDo) Last() (*model.WtGamecenter, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtGamecenter), nil
	}
}

func (w wtGamecenterDo) Find() ([]*model.WtGamecenter, error) {
	result, err := w.DO.Find()
	return result.([]*model.WtGamecenter), err
}

func (w wtGamecenterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WtGamecenter, err error) {
	buf := make([]*model.WtGamecenter, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wtGamecenterDo) FindInBatches(result *[]*model.WtGamecenter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wtGamecenterDo) Attrs(attrs ...field.AssignExpr) *wtGamecenterDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wtGamecenterDo) Assign(attrs ...field.AssignExpr) *wtGamecenterDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wtGamecenterDo) Joins(fields ...field.RelationField) *wtGamecenterDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wtGamecenterDo) Preload(fields ...field.RelationField) *wtGamecenterDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wtGamecenterDo) FirstOrInit() (*model.WtGamecenter, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtGamecenter), nil
	}
}

func (w wtGamecenterDo) FirstOrCreate() (*model.WtGamecenter, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtGamecenter), nil
	}
}

func (w wtGamecenterDo) FindByPage(offset int, limit int) (result []*model.WtGamecenter, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wtGamecenterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wtGamecenterDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wtGamecenterDo) Delete(models ...*model.WtGamecenter) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wtGamecenterDo) withDO(do gen.Dao) *wtGamecenterDo {
	w.DO = *do.(*gen.DO)
	return w
}
