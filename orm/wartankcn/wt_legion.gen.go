// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package wartankcn

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/caiknife/mp3lister/orm/wartankcn/model"
)

func newWtLegion(db *gorm.DB, opts ...gen.DOOption) wtLegion {
	_wtLegion := wtLegion{}

	_wtLegion.wtLegionDo.UseDB(db, opts...)
	_wtLegion.wtLegionDo.UseModel(&model.WtLegion{})

	tableName := _wtLegion.wtLegionDo.TableName()
	_wtLegion.ALL = field.NewAsterisk(tableName)
	_wtLegion.ID = field.NewUint64(tableName, "id")
	_wtLegion.Tag = field.NewString(tableName, "tag")
	_wtLegion.LegionName = field.NewString(tableName, "legion_name")
	_wtLegion.LegionBanner = field.NewField(tableName, "legion_banner")
	_wtLegion.Slogan = field.NewString(tableName, "slogan")
	_wtLegion.LimitTrophy = field.NewInt32(tableName, "limit_trophy")
	_wtLegion.LimitWeek = field.NewInt32(tableName, "limit_week")
	_wtLegion.Members = field.NewField(tableName, "members")
	_wtLegion.OpenLvl = field.NewInt32(tableName, "open_lvl")
	_wtLegion.TrophyScore = field.NewInt32(tableName, "trophy_score")
	_wtLegion.CreateTime = field.NewTime(tableName, "create_time")
	_wtLegion.UpdateTime = field.NewTime(tableName, "update_time")
	_wtLegion.Version = field.NewInt64(tableName, "version")
	_wtLegion.WarScore = field.NewInt32(tableName, "war_score")
	_wtLegion.JoinWar = field.NewInt32(tableName, "join_war")
	_wtLegion.TankNumLimit = field.NewInt32(tableName, "tank_num_limit")

	_wtLegion.fillFieldMap()

	return _wtLegion
}

// wtLegion 军团表
type wtLegion struct {
	wtLegionDo

	ALL          field.Asterisk
	ID           field.Uint64 // 军团ID
	Tag          field.String // 8位简码
	LegionName   field.String // 军团名
	LegionBanner field.Field  // 军团旗帜
	Slogan       field.String // 标语
	LimitTrophy  field.Int32  // 奖杯限制
	LimitWeek    field.Int32  // 周数限制
	Members      field.Field  // 成员
	OpenLvl      field.Int32  // 开放级别
	TrophyScore  field.Int32  // 奖杯分
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 更新时间
	Version      field.Int64  // 版本锁
	WarScore     field.Int32  // 军团战分数
	JoinWar      field.Int32  // 是否加入军团战
	TankNumLimit field.Int32  // 加入军团的坦克限制

	fieldMap map[string]field.Expr
}

func (w wtLegion) Table(newTableName string) *wtLegion {
	w.wtLegionDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wtLegion) As(alias string) *wtLegion {
	w.wtLegionDo.DO = *(w.wtLegionDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wtLegion) updateTableName(table string) *wtLegion {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewUint64(table, "id")
	w.Tag = field.NewString(table, "tag")
	w.LegionName = field.NewString(table, "legion_name")
	w.LegionBanner = field.NewField(table, "legion_banner")
	w.Slogan = field.NewString(table, "slogan")
	w.LimitTrophy = field.NewInt32(table, "limit_trophy")
	w.LimitWeek = field.NewInt32(table, "limit_week")
	w.Members = field.NewField(table, "members")
	w.OpenLvl = field.NewInt32(table, "open_lvl")
	w.TrophyScore = field.NewInt32(table, "trophy_score")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")
	w.Version = field.NewInt64(table, "version")
	w.WarScore = field.NewInt32(table, "war_score")
	w.JoinWar = field.NewInt32(table, "join_war")
	w.TankNumLimit = field.NewInt32(table, "tank_num_limit")

	w.fillFieldMap()

	return w
}

func (w *wtLegion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wtLegion) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 16)
	w.fieldMap["id"] = w.ID
	w.fieldMap["tag"] = w.Tag
	w.fieldMap["legion_name"] = w.LegionName
	w.fieldMap["legion_banner"] = w.LegionBanner
	w.fieldMap["slogan"] = w.Slogan
	w.fieldMap["limit_trophy"] = w.LimitTrophy
	w.fieldMap["limit_week"] = w.LimitWeek
	w.fieldMap["members"] = w.Members
	w.fieldMap["open_lvl"] = w.OpenLvl
	w.fieldMap["trophy_score"] = w.TrophyScore
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
	w.fieldMap["version"] = w.Version
	w.fieldMap["war_score"] = w.WarScore
	w.fieldMap["join_war"] = w.JoinWar
	w.fieldMap["tank_num_limit"] = w.TankNumLimit
}

func (w wtLegion) clone(db *gorm.DB) wtLegion {
	w.wtLegionDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wtLegion) replaceDB(db *gorm.DB) wtLegion {
	w.wtLegionDo.ReplaceDB(db)
	return w
}

type wtLegionDo struct{ gen.DO }

func (w wtLegionDo) Debug() *wtLegionDo {
	return w.withDO(w.DO.Debug())
}

func (w wtLegionDo) WithContext(ctx context.Context) *wtLegionDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wtLegionDo) ReadDB() *wtLegionDo {
	return w.Clauses(dbresolver.Read)
}

func (w wtLegionDo) WriteDB() *wtLegionDo {
	return w.Clauses(dbresolver.Write)
}

func (w wtLegionDo) Session(config *gorm.Session) *wtLegionDo {
	return w.withDO(w.DO.Session(config))
}

func (w wtLegionDo) Clauses(conds ...clause.Expression) *wtLegionDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wtLegionDo) Returning(value interface{}, columns ...string) *wtLegionDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wtLegionDo) Not(conds ...gen.Condition) *wtLegionDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wtLegionDo) Or(conds ...gen.Condition) *wtLegionDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wtLegionDo) Select(conds ...field.Expr) *wtLegionDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wtLegionDo) Where(conds ...gen.Condition) *wtLegionDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wtLegionDo) Order(conds ...field.Expr) *wtLegionDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wtLegionDo) Distinct(cols ...field.Expr) *wtLegionDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wtLegionDo) Omit(cols ...field.Expr) *wtLegionDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wtLegionDo) Join(table schema.Tabler, on ...field.Expr) *wtLegionDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wtLegionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wtLegionDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wtLegionDo) RightJoin(table schema.Tabler, on ...field.Expr) *wtLegionDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wtLegionDo) Group(cols ...field.Expr) *wtLegionDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wtLegionDo) Having(conds ...gen.Condition) *wtLegionDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wtLegionDo) Limit(limit int) *wtLegionDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wtLegionDo) Offset(offset int) *wtLegionDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wtLegionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wtLegionDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wtLegionDo) Unscoped() *wtLegionDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wtLegionDo) Create(values ...*model.WtLegion) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wtLegionDo) CreateInBatches(values []*model.WtLegion, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wtLegionDo) Save(values ...*model.WtLegion) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wtLegionDo) First() (*model.WtLegion, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtLegion), nil
	}
}

func (w wtLegionDo) Take() (*model.WtLegion, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtLegion), nil
	}
}

func (w wtLegionDo) Last() (*model.WtLegion, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtLegion), nil
	}
}

func (w wtLegionDo) Find() ([]*model.WtLegion, error) {
	result, err := w.DO.Find()
	return result.([]*model.WtLegion), err
}

func (w wtLegionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WtLegion, err error) {
	buf := make([]*model.WtLegion, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wtLegionDo) FindInBatches(result *[]*model.WtLegion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wtLegionDo) Attrs(attrs ...field.AssignExpr) *wtLegionDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wtLegionDo) Assign(attrs ...field.AssignExpr) *wtLegionDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wtLegionDo) Joins(fields ...field.RelationField) *wtLegionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wtLegionDo) Preload(fields ...field.RelationField) *wtLegionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wtLegionDo) FirstOrInit() (*model.WtLegion, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtLegion), nil
	}
}

func (w wtLegionDo) FirstOrCreate() (*model.WtLegion, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtLegion), nil
	}
}

func (w wtLegionDo) FindByPage(offset int, limit int) (result []*model.WtLegion, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wtLegionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wtLegionDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wtLegionDo) Delete(models ...*model.WtLegion) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wtLegionDo) withDO(do gen.Dao) *wtLegionDo {
	w.DO = *do.(*gen.DO)
	return w
}
