// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package wartankcn

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/caiknife/mp3lister/orm/wartankcn/model"
)

func newWtGift(db *gorm.DB, opts ...gen.DOOption) wtGift {
	_wtGift := wtGift{}

	_wtGift.wtGiftDo.UseDB(db, opts...)
	_wtGift.wtGiftDo.UseModel(&model.WtGift{})

	tableName := _wtGift.wtGiftDo.TableName()
	_wtGift.ALL = field.NewAsterisk(tableName)
	_wtGift.ID = field.NewInt64(tableName, "id")
	_wtGift.GiftCode = field.NewString(tableName, "gift_code")
	_wtGift.GiftProductID = field.NewString(tableName, "gift_product_id")
	_wtGift.GiftType = field.NewInt32(tableName, "gift_type")
	_wtGift.BundleID = field.NewString(tableName, "bundle_id")
	_wtGift.EffectiveTime = field.NewTime(tableName, "effective_time")
	_wtGift.ExpireTime = field.NewTime(tableName, "expire_time")
	_wtGift.GiftStatus = field.NewInt32(tableName, "gift_status")
	_wtGift.CreateTime = field.NewTime(tableName, "create_time")
	_wtGift.UpdateTime = field.NewTime(tableName, "update_time")
	_wtGift.Version = field.NewInt64(tableName, "version")

	_wtGift.fillFieldMap()

	return _wtGift
}

// wtGift 礼品码表
type wtGift struct {
	wtGiftDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键
	GiftCode      field.String // 礼品码
	GiftProductID field.String // 奖励商品ID
	GiftType      field.Int32  // 礼品码类型
	BundleID      field.String // bundle_id
	EffectiveTime field.Time   // 生效时间
	ExpireTime    field.Time   // 过期时间
	GiftStatus    field.Int32  // 状态
	CreateTime    field.Time   // 创建时间
	UpdateTime    field.Time   // 更新时间
	Version       field.Int64  // 数据版本锁

	fieldMap map[string]field.Expr
}

func (w wtGift) Table(newTableName string) *wtGift {
	w.wtGiftDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wtGift) As(alias string) *wtGift {
	w.wtGiftDo.DO = *(w.wtGiftDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wtGift) updateTableName(table string) *wtGift {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.GiftCode = field.NewString(table, "gift_code")
	w.GiftProductID = field.NewString(table, "gift_product_id")
	w.GiftType = field.NewInt32(table, "gift_type")
	w.BundleID = field.NewString(table, "bundle_id")
	w.EffectiveTime = field.NewTime(table, "effective_time")
	w.ExpireTime = field.NewTime(table, "expire_time")
	w.GiftStatus = field.NewInt32(table, "gift_status")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")
	w.Version = field.NewInt64(table, "version")

	w.fillFieldMap()

	return w
}

func (w *wtGift) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wtGift) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["gift_code"] = w.GiftCode
	w.fieldMap["gift_product_id"] = w.GiftProductID
	w.fieldMap["gift_type"] = w.GiftType
	w.fieldMap["bundle_id"] = w.BundleID
	w.fieldMap["effective_time"] = w.EffectiveTime
	w.fieldMap["expire_time"] = w.ExpireTime
	w.fieldMap["gift_status"] = w.GiftStatus
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
	w.fieldMap["version"] = w.Version
}

func (w wtGift) clone(db *gorm.DB) wtGift {
	w.wtGiftDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wtGift) replaceDB(db *gorm.DB) wtGift {
	w.wtGiftDo.ReplaceDB(db)
	return w
}

type wtGiftDo struct{ gen.DO }

func (w wtGiftDo) Debug() *wtGiftDo {
	return w.withDO(w.DO.Debug())
}

func (w wtGiftDo) WithContext(ctx context.Context) *wtGiftDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wtGiftDo) ReadDB() *wtGiftDo {
	return w.Clauses(dbresolver.Read)
}

func (w wtGiftDo) WriteDB() *wtGiftDo {
	return w.Clauses(dbresolver.Write)
}

func (w wtGiftDo) Session(config *gorm.Session) *wtGiftDo {
	return w.withDO(w.DO.Session(config))
}

func (w wtGiftDo) Clauses(conds ...clause.Expression) *wtGiftDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wtGiftDo) Returning(value interface{}, columns ...string) *wtGiftDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wtGiftDo) Not(conds ...gen.Condition) *wtGiftDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wtGiftDo) Or(conds ...gen.Condition) *wtGiftDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wtGiftDo) Select(conds ...field.Expr) *wtGiftDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wtGiftDo) Where(conds ...gen.Condition) *wtGiftDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wtGiftDo) Order(conds ...field.Expr) *wtGiftDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wtGiftDo) Distinct(cols ...field.Expr) *wtGiftDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wtGiftDo) Omit(cols ...field.Expr) *wtGiftDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wtGiftDo) Join(table schema.Tabler, on ...field.Expr) *wtGiftDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wtGiftDo) LeftJoin(table schema.Tabler, on ...field.Expr) *wtGiftDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wtGiftDo) RightJoin(table schema.Tabler, on ...field.Expr) *wtGiftDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wtGiftDo) Group(cols ...field.Expr) *wtGiftDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wtGiftDo) Having(conds ...gen.Condition) *wtGiftDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wtGiftDo) Limit(limit int) *wtGiftDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wtGiftDo) Offset(offset int) *wtGiftDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wtGiftDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *wtGiftDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wtGiftDo) Unscoped() *wtGiftDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wtGiftDo) Create(values ...*model.WtGift) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wtGiftDo) CreateInBatches(values []*model.WtGift, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wtGiftDo) Save(values ...*model.WtGift) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wtGiftDo) First() (*model.WtGift, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtGift), nil
	}
}

func (w wtGiftDo) Take() (*model.WtGift, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtGift), nil
	}
}

func (w wtGiftDo) Last() (*model.WtGift, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtGift), nil
	}
}

func (w wtGiftDo) Find() ([]*model.WtGift, error) {
	result, err := w.DO.Find()
	return result.([]*model.WtGift), err
}

func (w wtGiftDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WtGift, err error) {
	buf := make([]*model.WtGift, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wtGiftDo) FindInBatches(result *[]*model.WtGift, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wtGiftDo) Attrs(attrs ...field.AssignExpr) *wtGiftDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wtGiftDo) Assign(attrs ...field.AssignExpr) *wtGiftDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wtGiftDo) Joins(fields ...field.RelationField) *wtGiftDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wtGiftDo) Preload(fields ...field.RelationField) *wtGiftDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wtGiftDo) FirstOrInit() (*model.WtGift, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtGift), nil
	}
}

func (w wtGiftDo) FirstOrCreate() (*model.WtGift, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WtGift), nil
	}
}

func (w wtGiftDo) FindByPage(offset int, limit int) (result []*model.WtGift, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wtGiftDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wtGiftDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wtGiftDo) Delete(models ...*model.WtGift) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wtGiftDo) withDO(do gen.Dao) *wtGiftDo {
	w.DO = *do.(*gen.DO)
	return w
}
